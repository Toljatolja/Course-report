# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏–∏ SPG (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥).
–§–æ—Ä–º–∞—Ç: IAGA-2002.
–í—Å–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ dataset_prefix.
"""

import os
import glob
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# -------------------------------------------------
# üîë –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê: –∑–∞–¥–∞–π—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –æ–¥–∏–Ω —Ä–∞–∑
# -------------------------------------------------
dataset_prefix = "spg2022"          # ‚Üê‚Üê‚Üê –ú–ï–ù–Ø–¢–¨ –¢–û–õ–¨–ö–û –≠–¢–£ –°–¢–†–û–ö–£
station_code = "SPG"                # –ö–æ–¥ –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏–∏ (–¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Ç–∏)
year = "2022"                       # –ì–æ–¥ (–¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Ç–∏)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö –∏–º—ë–Ω
file_pattern = f"{station_code}/{year}/{dataset_prefix}*.min"
output_plot_dir = f"plots_{dataset_prefix}"
output_csv_file = f"{dataset_prefix}_processed_full.csv"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.rcParams.update({'font.size': 10, 'figure.dpi': 120})

# ----------------------------
# 1. –°–û–ó–î–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ò –î–õ–Ø –ì–†–ê–§–ò–ö–û–í
# ----------------------------
os.makedirs(output_plot_dir, exist_ok=True)
print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {os.path.abspath(output_plot_dir)}")

# ----------------------------
# 2. –ü–û–ò–°–ö –§–ê–ô–õ–û–í
# ----------------------------
all_files = sorted(glob.glob(file_pattern))

if not all_files:
    raise FileNotFoundError(
        f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —à–∞–±–ª–æ–Ω—É: '{file_pattern}'.\n"
        f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ {station_code}/{year}/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª—ã {dataset_prefix}*.min."
    )

print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
for f in all_files[:3]:
    print(f"  ‚Üí {f}")

# ----------------------------
# 3. –ü–ê–†–°–ò–ù–ì –§–ê–ô–õ–û–í IAGA-2002
# ----------------------------

def parse_iaga2002_min_file(filepath):
    """–ü–∞—Ä—Å–∏—Ç IAGA-2002 —Ñ–∞–π–ª —Å –º–∏–Ω—É—Ç–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    metadata = {}
    data_started = False
    records = []
    
    with open(filepath, 'r', encoding='utf-8') as f:
        for line in f:
            stripped = line.strip()
            if not stripped:
                continue

            # --- –°–±–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ---
            if stripped.startswith('Format'):
                metadata['Format'] = stripped.split('Format', 1)[1].strip()
            elif stripped.startswith('Station Name'):
                metadata['Station_Name'] = stripped.split('Station Name', 1)[1].strip()
            elif stripped.startswith('IAGA Code'):
                metadata['IAGA_Code'] = stripped.split('IAGA Code', 1)[1].strip()
            elif stripped.startswith('Geodetic Latitude'):
                try:
                    metadata['Latitude'] = float(stripped.split('Geodetic Latitude', 1)[1].strip())
                except:
                    pass
            elif stripped.startswith('Geodetic Longitude'):
                try:
                    metadata['Longitude'] = float(stripped.split('Geodetic Longitude', 1)[1].strip())
                except:
                    pass
            elif stripped.startswith('Reported'):
                metadata['Components'] = stripped.split('Reported', 1)[1].strip()
            elif stripped.startswith('Data Type'):
                metadata['Data_Type'] = stripped.split('Data Type', 1)[1].strip()

            # --- –ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ---
            if stripped.startswith('DATE') and 'TIME' in stripped:
                data_started = True
                continue

            # --- –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
            if data_started and stripped[0].isdigit():
                try:
                    parts = stripped.split()
                    if len(parts) < 7:
                        continue
                    dt = datetime.strptime(f"{parts[0]} {parts[1]}", '%Y-%m-%d %H:%M:%S.%f')
                    x = np.nan if parts[3] == '99999.00' else float(parts[3])
                    y = np.nan if parts[4] == '99999.00' else float(parts[4])
                    z = np.nan if parts[5] == '99999.00' else float(parts[5])
                    f_val = np.nan if parts[6] == '99999.00' else float(parts[6])
                    records.append([dt, x, y, z, f_val])
                except (ValueError, IndexError):
                    continue

    df = pd.DataFrame(records, columns=['DateTime', 'X', 'Y', 'Z', 'F'])
    df.set_index('DateTime', inplace=True)
    return df, metadata

# ----------------------------
# 4. –ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
# ----------------------------

print("\nüîç –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤...")
all_dfs = []
global_meta = {}

for i, fp in enumerate(all_files):
    df_part, meta = parse_iaga2002_min_file(fp)
    all_dfs.append(df_part)
    if i == 0:
        global_meta = meta

df_raw = pd.concat(all_dfs).sort_index()
df_raw = df_raw[~df_raw.index.duplicated(keep='first')]

if len(df_raw) == 0:
    raise ValueError("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤.")

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df_raw)}")
print(f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {df_raw.index.min()} –ø–æ {df_raw.index.max()}")

print("\nüìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞):")
for k, v in global_meta.items():
    print(f"  {k}: {v}")

# ----------------------------
# 5. –†–ê–ó–í–ï–î–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó (EDA)
# ----------------------------

print("\nüìä –†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
print(df_raw.describe())
print("\n–ü—Ä–æ–ø—É—Å–∫–∏ (%):")
print((df_raw.isnull().mean() * 100).round(3))

# –ì—Ä–∞—Ñ–∏–∫ 1: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
plt.figure(figsize=(16, 10))
for i, comp in enumerate(['X', 'Y', 'Z', 'F'], 1):
    plt.subplot(2, 2, i)
    plt.plot(df_raw.index, df_raw[comp], 'steelblue', linewidth=0.6, alpha=0.8)
    plt.title(f'–ò—Å—Ö–æ–¥–Ω—ã–µ: {comp}')
    plt.ylabel('–Ω–¢–ª')
    plt.grid(True, linestyle='--', alpha=0.5)
plt.suptitle(f'–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {station_code} ‚Äî –ò–°–•–û–î–ù–´–ï ({dataset_prefix})', fontsize=14)
plt.tight_layout()
plt.savefig(os.path.join(output_plot_dir, f'{dataset_prefix}_raw.png'), dpi=150, bbox_inches='tight')
plt.show()

# ----------------------------
# 6. –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê
# ----------------------------

df_proc = df_raw.copy()
df_proc = df_proc.interpolate(method='linear')
df_proc = df_proc.bfill().ffill()

print("\nüßπ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (%):")
print((df_proc.isnull().mean() * 100).round(6))

# –ì—Ä–∞—Ñ–∏–∫ 2: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
plt.figure(figsize=(16, 10))
for i, comp in enumerate(['X', 'Y', 'Z', 'F'], 1):
    plt.subplot(2, 2, i)
    plt.plot(df_proc.index, df_proc[comp], 'forestgreen', linewidth=0.7)
    plt.title(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {comp}')
    plt.ylabel('–Ω–¢–ª')
    plt.grid(True, linestyle='--', alpha=0.5)
plt.suptitle(f'–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {station_code} ‚Äî –ü–û–°–õ–ï –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ò ({dataset_prefix})', fontsize=14)
plt.tight_layout()
plt.savefig(os.path.join(output_plot_dir, f'{dataset_prefix}_processed.png'), dpi=150, bbox_inches='tight')
plt.show()

# –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
gap_mask = df_raw.isnull().any(axis=1)
if gap_mask.any():
    start_gap = df_raw.index[gap_mask].min()
    plot_start = start_gap - pd.Timedelta(hours=2)
    plot_end = start_gap + pd.Timedelta(hours=12)
else:
    plot_start = df_raw.index[0]
    plot_end = plot_start + pd.Timedelta(days=7)

plt.figure(figsize=(16, 10))
for i, comp in enumerate(['X', 'Y', 'Z', 'F'], 1):
    plt.subplot(2, 2, i)
    plt.plot(df_raw.loc[plot_start:plot_end].index, df_raw.loc[plot_start:plot_end, comp],
             'ro', markersize=2, label='–ò—Å—Ö–æ–¥–Ω—ã–µ', alpha=0.7)
    plt.plot(df_proc.loc[plot_start:plot_end].index, df_proc.loc[plot_start:plot_end, comp],
             'forestgreen', linewidth=1.5, label='–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    plt.title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {comp}')
    plt.ylabel('–Ω–¢–ª')
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.5)
plt.suptitle(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ({dataset_prefix})', fontsize=14)
plt.tight_layout()
plt.savefig(os.path.join(output_plot_dir, f'{dataset_prefix}_comparison.png'), dpi=150, bbox_inches='tight')
plt.show()

# ----------------------------
# 7. –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
# ----------------------------

df_proc.to_csv(output_csv_file)
print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_csv_file}")
print(f"üñºÔ∏è  –ì—Ä–∞—Ñ–∏–∫–∏ –≤: {output_plot_dir}")
print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")